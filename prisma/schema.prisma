// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Size {
  Small
  Medium
  Large
}

enum Role {
  Admin
  Manager
  User
}

model User {
  id          String    @id @default(uuid())
  email       String    @unique @db.VarChar(255)
  password    String
  avatar      String?
  verifyEmail Boolean   @default(false)
  firstName   String    @db.VarChar(50)
  lastName    String    @db.VarChar(50)
  phone       String?    @db.VarChar(10)
  role        Role      @default(User)
  tokens      Token[]
  addresses   Address[]

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@map("user")
}

model Address {
  id   String @id @default(uuid())
  name String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@map("address")
}

model Token {
  id    String @id @default(uuid())
  name  String @db.VarChar(255)
  value String @unique

  userId String
  user   User   @relation(fields: [userId], references: [id])

  expiryDate DateTime
  createAt   DateTime @default(now())

  @@map("token")
}

model Billboard {
  id          String @id @default(uuid())
  name        String
  description String
  url         String @unique @db.VarChar(255)
  publicUrlId String

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @unique

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@map("billboards")
}

model Category {
  id   String @id @default(uuid())
  name String @unique @db.VarChar(255)

  billboard Billboard?
  products  CategoryProduct[]

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@map("categories")
}

model Product {
  id          String  @id @default(uuid())
  name        String
  thumbnail   String
  rangePrice  String  @db.VarChar(255)
  description String  @db.Text
  guide       String  @db.Text
  publiced    Boolean @default(false)

  images     Image[]
  options    Option[]
  categories CategoryProduct[]

  tag Tag?

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@map("products")
}

model Tag {
  id   String @id @default(uuid())
  name String @db.VarChar(255)

  product   Product @relation(fields: [productId], references: [id])
  productId String  @unique

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@map("tags")
}

model Image {
  id  String @id
  url String @db.Text

  productId String

  product Product @relation(fields: [productId], references: [id])

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@map("images")
}

model Option {
  id    String @id @default(uuid())
  name  String @db.VarChar(255)
  sale  Float  @default(0)
  price Float  @default(0)
  size  Size?  @default(Small)

  Planter Planter[]

  productId String

  product Product @relation(fields: [productId], references: [id])

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@map("options")
}

model Color {
  id    String @id @default(uuid())
  name  String @db.VarChar(255)
  value String @db.VarChar(12)

  planterId String
  planter   Planter @relation(fields: [planterId], references: [id])

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@map("colors")
}

model Planter {
  id   String @id @default(uuid())
  name String @db.VarChar(255)

  optionId String
  option   Option  @relation(fields: [optionId], references: [id])
  colors   Color[]

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@map("planters")
}

model CategoryProduct {
  id         Int    @id @default(autoincrement())
  categoryId String
  productId  String

  category Category @relation(fields: [categoryId], references: [id])
  product  Product  @relation(fields: [productId], references: [id])

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@unique([categoryId, productId])
  @@map("product_category") // Fix the typo here
}
